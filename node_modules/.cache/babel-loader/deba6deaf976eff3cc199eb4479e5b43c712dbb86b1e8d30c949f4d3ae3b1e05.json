{"ast":null,"code":"const API_URL = 'http://127.0.0.1:5000'; // Make sure this URL is correct\n\n// Task API calls\nexport const fetchTasks = async () => {\n  const response = await fetch(`${API_URL}/tasks`);\n  return response.json();\n};\nexport const createTask = async task => {\n  const response = await fetch(`${API_URL}/tasks`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(task)\n  });\n  return response.json();\n};\nexport const fetchTask = async id => {\n  const response = await fetch(`${API_URL}/tasks/${id}`);\n  return response.json();\n};\n\n// User API calls\nexport const fetchUsers = async () => {\n  const response = await fetch(`${API_URL}/users`);\n  return response.json();\n};\nexport const createUser = async user => {\n  const response = await fetch(`${API_URL}/users`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  });\n  return response.json();\n};\nexport const fetchUser = async id => {\n  const response = await fetch(`${API_URL}/users/${id}`);\n  return response.json();\n};\n\n// Project API calls\nexport const fetchProjects = async () => {\n  const response = await fetch(`${API_URL}/projects`);\n  return response.json();\n};\nexport const createProject = async project => {\n  const response = await fetch(`${API_URL}/projects`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(project)\n  });\n  return response.json();\n};\nexport const fetchProject = async id => {\n  const response = await fetch(`${API_URL}/projects/${id}`);\n  return response.json();\n};\nexport const loginUser = async credentials => {\n  try {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      throw new Error('Login failed');\n    }\n    const data = await response.json();\n    // Assuming your backend returns a token upon successful login\n    return data.token; // Adjust this based on your backend response\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","fetchTasks","response","fetch","json","createTask","task","method","headers","body","JSON","stringify","fetchTask","id","fetchUsers","createUser","user","fetchUser","fetchProjects","createProject","project","fetchProject","loginUser","credentials","ok","Error","data","token","error","console"],"sources":["/home/gregory/Desktop/taskmanager1/task-management-system/src/api.js"],"sourcesContent":["const API_URL = 'http://127.0.0.1:5000';  // Make sure this URL is correct\n\n// Task API calls\nexport const fetchTasks = async () => {\n  const response = await fetch(`${API_URL}/tasks`);\n  return response.json();\n};\n\nexport const createTask = async (task) => {\n  const response = await fetch(`${API_URL}/tasks`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(task),\n  });\n  return response.json();\n};\n\nexport const fetchTask = async (id) => {\n  const response = await fetch(`${API_URL}/tasks/${id}`);\n  return response.json();\n};\n\n// User API calls\nexport const fetchUsers = async () => {\n  const response = await fetch(`${API_URL}/users`);\n  return response.json();\n};\n\nexport const createUser = async (user) => {\n  const response = await fetch(`${API_URL}/users`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(user),\n  });\n  return response.json();\n};\n\nexport const fetchUser = async (id) => {\n  const response = await fetch(`${API_URL}/users/${id}`);\n  return response.json();\n};\n\n// Project API calls\nexport const fetchProjects = async () => {\n  const response = await fetch(`${API_URL}/projects`);\n  return response.json();\n};\n\nexport const createProject = async (project) => {\n  const response = await fetch(`${API_URL}/projects`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(project),\n  });\n  return response.json();\n};\n\nexport const fetchProject = async (id) => {\n  const response = await fetch(`${API_URL}/projects/${id}`);\n  return response.json();\n};\n\n\nexport const loginUser = async (credentials) => {\n  try {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(credentials),\n    });\n\n    if (!response.ok) {\n      throw new Error('Login failed');\n    }\n\n    const data = await response.json();\n    // Assuming your backend returns a token upon successful login\n    return data.token; // Adjust this based on your backend response\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}