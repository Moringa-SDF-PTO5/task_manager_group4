{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://127.0.0.1:5000'; // Make sure this URL is correct\n\n// Task API calls\nexport const fetchTasks = async () => {\n  const response = await fetch(`${API_URL}/tasks`);\n  return response.json();\n};\nexport const createTask = async task => {\n  try {\n    const response = await axios.post(`${API_URL}/tasks`, task, {\n      headers: {\n        'Content-Type': 'application/json'\n        // Add JWT token if required for authentication\n        // Authorization: `Bearer ${token}`,\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const fetchTask = async id => {\n  const response = await fetch(`${API_URL}/tasks/${id}`);\n  return response.json();\n};\n\n// User API calls\nexport const fetchUsers = async () => {\n  const response = await fetch(`${API_URL}/users`);\n  return response.json();\n};\nexport const createUser = async user => {\n  const response = await fetch(`${API_URL}/users`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  });\n  return response.json();\n};\nexport const fetchUser = async id => {\n  const response = await fetch(`${API_URL}/users/${id}`);\n  return response.json();\n};\n\n// Project API calls\nexport const fetchProjects = async () => {\n  const response = await fetch(`${API_URL}/projects`);\n  return response.json();\n};\nexport const createProject = async project => {\n  const response = await fetch(`${API_URL}/projects`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(project)\n  });\n  return response.json();\n};\nexport const fetchProject = async id => {\n  const response = await fetch(`${API_URL}/projects/${id}`);\n  return response.json();\n};\nexport const loginUser = async credentials => {\n  try {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      throw new Error('Login failed');\n    }\n    const data = await response.json();\n    // Assuming your backend returns a token upon successful login\n    return data.token; // Adjust this based on your backend response\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\nexport const registerUser = async formData => {\n  const response = await fetch(`${API_URL}/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(formData)\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Registration failed.');\n  }\n  return response.json();\n};","map":{"version":3,"names":["axios","API_URL","fetchTasks","response","fetch","json","createTask","task","post","headers","data","error","fetchTask","id","fetchUsers","createUser","user","method","body","JSON","stringify","fetchUser","fetchProjects","createProject","project","fetchProject","loginUser","credentials","ok","Error","token","console","registerUser","formData","errorData","message"],"sources":["/home/gregory/Desktop/tasks_app/task-management-system/src/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://127.0.0.1:5000';  // Make sure this URL is correct\n\n// Task API calls\nexport const fetchTasks = async () => {\n  const response = await fetch(`${API_URL}/tasks`);\n  return response.json();\n};\n\n\nexport const createTask = async (task) => {\n  try {\n      const response = await axios.post(`${API_URL}/tasks`, task, {\n          headers: {\n              'Content-Type': 'application/json',\n              // Add JWT token if required for authentication\n              // Authorization: `Bearer ${token}`,\n          },\n      });\n      return response.data;\n  } catch (error) {\n      throw error;\n  }\n};\n\nexport const fetchTask = async (id) => {\n  const response = await fetch(`${API_URL}/tasks/${id}`);\n  return response.json();\n};\n\n// User API calls\nexport const fetchUsers = async () => {\n  const response = await fetch(`${API_URL}/users`);\n  return response.json();\n};\n\nexport const createUser = async (user) => {\n  const response = await fetch(`${API_URL}/users`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(user),\n  });\n  return response.json();\n};\n\nexport const fetchUser = async (id) => {\n  const response = await fetch(`${API_URL}/users/${id}`);\n  return response.json();\n};\n\n// Project API calls\nexport const fetchProjects = async () => {\n  const response = await fetch(`${API_URL}/projects`);\n  return response.json();\n};\n\nexport const createProject = async (project) => {\n  const response = await fetch(`${API_URL}/projects`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(project),\n  });\n  return response.json();\n};\n\nexport const fetchProject = async (id) => {\n  const response = await fetch(`${API_URL}/projects/${id}`);\n  return response.json();\n};\n\n\nexport const loginUser = async (credentials) => {\n  try {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(credentials),\n    });\n\n    if (!response.ok) {\n      throw new Error('Login failed');\n    }\n\n    const data = await response.json();\n    // Assuming your backend returns a token upon successful login\n    return data.token; // Adjust this based on your backend response\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\nexport const registerUser = async (formData) => {\n  const response = await fetch(`${API_URL}/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(formData),\n  });\n\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Registration failed.');\n  }\n\n  return response.json();\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}