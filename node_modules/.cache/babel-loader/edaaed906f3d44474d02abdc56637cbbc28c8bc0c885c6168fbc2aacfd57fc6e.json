{"ast":null,"code":"const API_URL = 'http://127.0.0.1:5000'; // Make sure this URL is correct\n\n// Task API calls\nexport const fetchTasks = async () => {\n  const response = await fetch(`${API_URL}/tasks`);\n  return response.json();\n};\nexport const createTask = async task => {\n  try {\n    const response = await fetch(`${API_URL}/tasks`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create task');\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\nexport const fetchTask = async id => {\n  const response = await fetch(`${API_URL}/tasks/${id}`);\n  return response.json();\n};\n\n// User API calls\nexport const fetchUsers = async () => {\n  const response = await fetch(`${API_URL}/users`);\n  return response.json();\n};\nexport const createUser = async user => {\n  const response = await fetch(`${API_URL}/users`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  });\n  return response.json();\n};\nexport const fetchUser = async id => {\n  const response = await fetch(`${API_URL}/users/${id}`);\n  return response.json();\n};\n\n// Project API calls\nexport const fetchProjects = async () => {\n  const response = await fetch(`${API_URL}/projects`);\n  return response.json();\n};\nexport const createProject = async project => {\n  const response = await fetch(`${API_URL}/projects`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(project)\n  });\n  return response.json();\n};\nexport const fetchProject = async id => {\n  const response = await fetch(`${API_URL}/projects/${id}`);\n  return response.json();\n};\nexport const loginUser = async credentials => {\n  try {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      throw new Error('Login failed');\n    }\n    const data = await response.json();\n    // Assuming your backend returns a token upon successful login\n    return data.token; // Adjust this based on your backend response\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\nexport const registerUser = async formData => {\n  const response = await fetch(`${API_URL}/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(formData)\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Registration failed.');\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_URL","fetchTasks","response","fetch","json","createTask","task","method","headers","body","JSON","stringify","ok","Error","error","message","fetchTask","id","fetchUsers","createUser","user","fetchUser","fetchProjects","createProject","project","fetchProject","loginUser","credentials","data","token","console","registerUser","formData","errorData"],"sources":["/home/gregory/Desktop/tasks_app/task-management-system/src/api.js"],"sourcesContent":["const API_URL = 'http://127.0.0.1:5000';  // Make sure this URL is correct\n\n// Task API calls\nexport const fetchTasks = async () => {\n  const response = await fetch(`${API_URL}/tasks`);\n  return response.json();\n};\n\nexport const createTask = async (task) => {\n  try {\n    const response = await fetch(`${API_URL}/tasks`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(task),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to create task');\n    }\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\n\n\nexport const fetchTask = async (id) => {\n  const response = await fetch(`${API_URL}/tasks/${id}`);\n  return response.json();\n};\n\n// User API calls\nexport const fetchUsers = async () => {\n  const response = await fetch(`${API_URL}/users`);\n  return response.json();\n};\n\nexport const createUser = async (user) => {\n  const response = await fetch(`${API_URL}/users`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(user),\n  });\n  return response.json();\n};\n\nexport const fetchUser = async (id) => {\n  const response = await fetch(`${API_URL}/users/${id}`);\n  return response.json();\n};\n\n// Project API calls\nexport const fetchProjects = async () => {\n  const response = await fetch(`${API_URL}/projects`);\n  return response.json();\n};\n\nexport const createProject = async (project) => {\n  const response = await fetch(`${API_URL}/projects`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(project),\n  });\n  return response.json();\n};\n\nexport const fetchProject = async (id) => {\n  const response = await fetch(`${API_URL}/projects/${id}`);\n  return response.json();\n};\n\n\nexport const loginUser = async (credentials) => {\n  try {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(credentials),\n    });\n\n    if (!response.ok) {\n      throw new Error('Login failed');\n    }\n\n    const data = await response.json();\n    // Assuming your backend returns a token upon successful login\n    return data.token; // Adjust this based on your backend response\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\nexport const registerUser = async (formData) => {\n  const response = await fetch(`${API_URL}/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(formData),\n  });\n\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Registration failed.');\n  }\n\n  return response.json();\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}